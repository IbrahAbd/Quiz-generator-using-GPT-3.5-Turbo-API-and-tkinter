from openai import OpenAI
from tkinter import *

def getQuestion(topic, difficulty, numQ):
        client = OpenAI(api_key= open("E:\GPT api\key.txt","r").read())                   # API key location on your computer. Change this to your own text file path containing your key.
        completion = client.chat.completions.create(
            model = "gpt-3.5-turbo",                                                    
            messages =                                                                    # Prompt for GPT.
            [        
                {"role":"user","content": "Give me " + numQ + " " + difficulty + " multiple choice questions about: " + topic + '''. 
                List the questions first then each option on a newline. DO NOT INCLUDE "Question x:" before the actual question!
                
                Let there only be 4 options A,B,C,D like the following:
                Question
                A. option 1
                B. option 2
                C. option 3
                D. option 4
 
                VERY IMPORTANT: 
                1.) ALWAYS GIVE ALL the letter answers for the questions on the very last line seperated by ", "
                2.) Let there be NO newline after the initial question. 
                3.) Let there be a newline after the D option in each question.
                4.) If there is 1 question let there only be 1 answer.
                5.) DO NOT add any additional information other than the above.'''},
            ]
        )
        return completion.choices[0].message.content

questionNum = 0
i = 0
j = 0
answerIndex = 0                                                         # Index for answers array below.
correct = 0                                                             # Variable to store amount of correct answers by user.

def create_window():  
        
        questions= []                                                   # Array to store the questions generated by GPT.
        options = []                                                    # Array to store the answer options generated by GPT.
        answers = []                                                    # Array to store the question asnwers generated by GPT.
        user_answers = []                                               # Array to store the user answers for manipulation later on.
        
        def destroyWidgets(message,buttonA,buttonB,buttonC,buttonD):    # Function to destroy all widgets to empty the window.
                message.destroy()
                buttonA.destroy()
                buttonB.destroy()
                buttonC.destroy()
                buttonD.destroy()                
                
        def destroy():                                                  # Function to destroy all initial component widgets seen on the starting window.
                difficultyChoice.destroy()
                topicBox.destroy()
                label.destroy()
                label2.destroy() 
                label3.destroy() 
                submit_button.destroy()
                numQuestions.destroy()
             
        def onEnterPressed(file,numQ):                                  # Function that parses GPT's response accordingly.
                destroy()
                array = file.split("\n")
                count = 1
            
                for i in range(len(array)):
                        if i >= len(array)-1:                           # To get all answers in the last line from the output of GPT.
                                answers = array[i].split(", ")
                        elif count == 1:
                                questions.append(array[i])
                                count += 1
                        elif count != 6:
                                options.append(array[i])
                                count += 1
                        else:
                                count = 1   
                #print(file)                                            # Used for debugging to see if questions are displayed properly.
                #print(answers)                                         # Used for debugging percentage of correct questions.
                display_questions(0,answers,numQ)                                   
        
        def change_color(label):                                        # Function to provide a nice and simple rainbow animation for when user gets >= 80% on the quiz.
                label.config(fg="#FF7F00")
                label.after(250, lambda: label.config(fg="#FFFF00"))
                label.after(500, lambda: label.config(fg="#00FF00"))
                label.after(750, lambda: label.config(fg="#0000FF"))
                label.after(1000, lambda: label.config(fg="#4B0082"))
                label.after(1250, lambda: label.config(fg="#8A2BE2"))
                label.after(1500, lambda: change_color(label))
        
        def restart():                                                  # Function to restart the quiz and reset all necassary variables/arrays.      
                window.destroy()
                global i                                                # Global used as scope is small enough to accomodate. Use of classes can prevent this use.
                global correct
                global answerIndex                
                questions = []
                options = []
                answers = []
                questionNum = 0
                i = 0
                j = 0
                answerIndex = 0  
                correct = 0                
                create_window()
                
        def quit():                                                     # Function to close window permanantly.
                window.destroy()
                
        def displayEndScreen(numQ,answers):                             # Function to display the user end score and quit, restart and review questions options.
                percentageCorrect = (correct/int(numQ))*100
                string = str(int(percentageCorrect)) + "%"
                label = Label(window, text=string , font=('Arial', 80, 'bold'))
                label.pack(fill='both', expand=True)
                if percentageCorrect == 100:
                        label.place(x=310, y=200)
                elif percentageCorrect == 0:
                        label.place(x=365, y=200)
                else:
                        label.place(x=340, y=200)
                label.config(bg = "#0A0A0A")
                label.config(fg = "#FFFFF7")  
                
                buttonRestart = Button(window, text="Start new quiz", width=25, height=5, command=restart) 
                buttonRestart.pack()
                buttonRestart.place(x=250, y=350)  
                
                buttonQuit = Button(window, text="Quit", width=25, height=5, command=quit) 
                buttonQuit.pack()
                buttonQuit.place(x=450, y=350)      
                
                def destroyQandA(numQ,text,buttonReturn,answers):               # Function to destroy all the QandA widgets.
                        text.destroy()
                        buttonReturn.destroy()
                        displayEndScreen(numQ,answers)
                        
                def displayQandA(numQ,answers):                                 # Function to display the questions, their answers (in green) and the user's answer(green/red)
                        label.destroy()                                         
                        buttonCheckWrongQuestions.destroy()
                        buttonRestart.destroy()
                        buttonQuit.destroy()
                        
                        text = Text(window)
                        text.pack(padx=120, pady=50)
                        text.tag_config("g", foreground="green")
                        text.tag_config("r", foreground="red")
                        count = 0
                        rowColCount = 0
                        optionsLetters = [word[0] for word in options]
                        for q in range(len(questions)):
                                text.insert(END, str(questions[q] + "\n"))
                                for o in range(4):
                                        string = optionsLetters[count]
                                        if string == str(answers[q]):
                                                text.insert(END, str(options[count] + "\n"))
                                                text.tag_add("g", f"{rowColCount+2}.0", f"{rowColCount+2}.end") 

                                        elif string == user_answers[q] and user_answers != str(answers[q]):
                                                text.insert(END, str(options[count] + "\n"))
                                                text.tag_add("r", f"{rowColCount+2}.0", f"{rowColCount+2}.end") 
                                                                                                                        
                                        else:
                                                text.insert(END, str(options[count] + "\n")) 
                                                
                                                
                                        count += 1
                                        rowColCount += 1
                                        
                                text.insert(END, "\n")           
                                rowColCount += 2

                                                                  
                        text.configure(state='disabled')         
                        
                        buttonReturn = Button(window, text="Return", width=25, height=5, command=lambda:destroyQandA(numQ,text,buttonReturn,answers)) 
                        buttonReturn.pack()
                        buttonReturn.place(x=350, y=450)                           
                     
                
                buttonCheckWrongQuestions = Button(window, text="Questions & Answers", width=25, height=5, command=lambda: displayQandA(numQ,answers))
                buttonCheckWrongQuestions.pack()
                buttonCheckWrongQuestions.place(x=350, y=450)                
                
                if int(percentageCorrect) >= 80:
                        change_color(label)                        

                
        def check_ans(option,message,buttonA,buttonB,buttonC,buttonD,answers,numQ):                      # Function to check the answers after the user selects a button.
                global i
                global correct
                global answerIndex
                correct_answer = answers[i].upper()
                user_answers.append(option)
                if option == correct_answer:
                        correct += 1
                        if i == int(numQ)-1:
                                destroyWidgets(message,buttonA,buttonB,buttonC,buttonD)
                                displayEndScreen(numQ,answers)
                        else:
                                destroyWidgets(message,buttonA,buttonB,buttonC,buttonD)
                                i += 1
                                answerIndex += 1
                                display_questions(i,answers,numQ)  
                        
                else:              
                        if i == int(numQ)-1:
                                destroyWidgets(message,buttonA,buttonB,buttonC,buttonD)
                                displayEndScreen(numQ,answers)
                        else:
                                
                                destroyWidgets(message,buttonA,buttonB,buttonC,buttonD)
                                i += 1
                                answerIndex += 1
                                display_questions(i,answers,numQ)      
                
        def display_questions(i,answers,numQ):                                                           # Function to display the questions and the button choices for the answers.
                
                message = Message(window, text=questions[i], width=650, padx=20, pady=20, font=('Arial', 20, 'bold'))
                message.place(x=50, y=100)
                message.config(bg = "#0A0A0A")
                message.config(fg = "#FFFFF7")                    
                message.pack()

                buttonA = Button(window, text=options[i * 4], width=50, height=10, command=lambda: check_ans("A",message,buttonA,buttonB,buttonC,buttonD,answers,numQ))
                buttonA.pack()
                buttonA.place(x=75, y=225)
        
                buttonB = Button(window, text=options[i * 4 + 1], width=50, height=10, command=lambda: check_ans("B",message,buttonA,buttonB,buttonC,buttonD,answers,numQ))
                buttonB.pack()
                buttonB.place(x=465, y=225)
                
                buttonC = Button(window, text=options[i * 4 + 2], width=50, height=10, command=lambda: check_ans("C",message,buttonA,buttonB,buttonC,buttonD,answers,numQ))
                buttonC.pack()
                buttonC.place(x=75, y=400)
                
                buttonD = Button(window, text=options[i * 4 + 3], width=50, height=10, command=lambda: check_ans("D",message,buttonA,buttonB,buttonC,buttonD,answers,numQ))
                buttonD.pack()
                buttonD.place(x= 465, y=400)
                
        def get_question():                                                                              # Function to query GPT for the necessary questions & answers.  
                topic = topicBox.get()
                difficulty = difficultyChoice.get()
                numQ = numQuestions.get()
                print(f"Topic: {topic}, Difficulty: {difficulty}, Number of Questions: {numQ}")
                file = getQuestion(topic, difficulty, numQ)  
                onEnterPressed(file,numQ)
                
                
        window = Tk()
        window.geometry("900x600")
        window.title("GPT Quiz")  
        
        font = ("Helvetica", 16)
        
        label = Label(window, text="Enter a quiz topic!", font=('Arial', 40, 'bold'))                       # Label to display topic message.
        label.pack()
        label.place(x=210,y=50)
        
        label2 = Label(window, text="Enter a difficulty(Easy, Medium or Hard):", font=('Arial', 30, 'bold'))# Label to display difficulty message.
        label2.pack()
        label2.place(x=80,y=200)        
      
        label3= Label(window, text="Number of questions:", font=('Arial', 30, 'bold'))                      # Label to display amount of questions message.
        label3.pack()
        label3.place(x=225,y=325) 
        
        window.configure (bg="#0A0A0A")                                                                     # Configure window and labels to correct background and foreground colours.
        label.config(bg = "#0A0A0A")
        label.config(fg = "#FFFFF7")        
        label2.config(bg = "#0A0A0A")
        label2.config(fg = "#FFFFF7")      
        label3.config(bg = "#0A0A0A")
        label3.config(fg = "#FFFFF7")         
        
        topicBox = Entry(window, width = 30,font=font)                                                      # Entry box for the quiz topic.
        topicBox.pack()
        topicBox.place(x=250,y=140)              
        
        difficultyChoice = Entry(window, width = 30,font=font)                                              # Entry box for the quiz difficulty.
        difficultyChoice.pack()
        difficultyChoice.place(x=250,y=270)  
        
        numQuestions = Entry(window, width = 30,font=font)                                                  # Entry box for the number of quiz questions.
        numQuestions.pack()
        numQuestions.place(x=250,y=400)  
        
        submit_button = Button(window, text="Start",width=25, height=5, command=get_question)               # Button to submit all needed entries.
        submit_button.pack()
        submit_button.place(x=350, y=500)
         
        window.mainloop()
        
create_window()